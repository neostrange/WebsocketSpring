package com.tiss.tip.model;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.elasticsearch.annotations.Document;
import org.springframework.data.elasticsearch.annotations.Field;
import org.springframework.data.elasticsearch.annotations.FieldIndex;
import org.springframework.data.elasticsearch.annotations.FieldType;

/**
 * This class represents the {@link Incident} where a malware has been
 * downloaded by the attacker.
 */

@Document(indexName = "incident", type = "MalwareIncident")
public class MalwareIncident extends Incident {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2580741230147461394L;

	/**
	 * The logger for this class.
	 */
	private static Logger log = LoggerFactory.getLogger(MalwareIncident.class);

	/**
	 * Id required by Elasticsearch
	 */
//	 @Id
//	 private String _id;
	 
//	@Parent(type = "Incident")
//	 private String parentId;
//
//	public String getParentId() {
//		return parentId;
//	}
//
//	public void setParentId(String parentId) {
//		this.parentId = parentId;
//	}

	/**
	 * Will store the malware hash.
	 */
	@Field(type = FieldType.String, index = FieldIndex.not_analyzed)
	private String md5Hash;
	/**
	 * This will be the url through which malware was loaded.
	 */
	@Field(type = FieldType.String, index = FieldIndex.not_analyzed)
	private String url;
	/**
	 * The file path for the malware binary.
	 */
	@Field(type = FieldType.String, index = FieldIndex.not_analyzed)
	private String filePath;

	/**
	 * Session Id, in case of "kippo" malware download.
	 */
	@Field(type = FieldType.String, index = FieldIndex.not_analyzed)
	private String sessionId;
	/**
	 * Reference to the virustotal scan and its results.
	 */

	@Field(type = FieldType.Object)
	private VirusTotalScan vtScan;

	public MalwareIncident() {
		super();
	}

	/**
	 * Instantiates a new {@code MalwareIncident}
	 *
	 * @param dateTime
	 *            the date time
	 * @param srcIP
	 *            the source IP
	 * @param srcPort
	 *            the source port
	 * @param service
	 *            the service
	 * @param dstIP
	 *            the destination ip
	 * @param dstPort
	 *            the destination port
	 * @param protocol
	 *            the protocol
	 * @param org
	 *            the origin {@link Origin}
	 * @param md5Hash
	 *            the md5 hash of malware
	 * @param url
	 *            the url from where the malware was downloaded
	 * @param filePath
	 *            the file path where the malware binary is located
	 * @param sessionId
	 *            the session id, for SSH
	 * @param vtScan
	 *            the virustotal scan {@link VirusTotalScan}
	 */
	public MalwareIncident(String dateTime, String srcIP, int srcPort, String service, String dstIP, int dstPort,
			String protocol, Origin org, String md5Hash, String url, String filePath, String sessionId,
			VirusTotalScan vtScan) {
		super(dateTime, srcIP, srcPort, service, dstIP, dstPort, protocol, org);
		log.trace("Create new MalwareIncident instance with md5hash [{}], url [{}]", md5Hash, url);
		this.md5Hash = md5Hash;
		this.url = url;
		this.filePath = filePath;
		this.sessionId = sessionId;
		this.vtScan = vtScan;
	}

	public MalwareIncident(Incident inc, String md5Hash, String url, String filePath, String sessionId,
			VirusTotalScan vtScan) {
		super(inc.getDateTime(), inc.getSrcIP(), inc.getSrcPort(), inc.getService(), inc.getDstIP(), inc.getDstPort(),
				inc.getProtocol(), inc.getOrigin());
		log.trace("Create new MalwareIncident instance with md5hash [{}], url [{}]", md5Hash, url);
		this.md5Hash = md5Hash;
		this.url = url;
		this.filePath = filePath;
		this.sessionId = sessionId;
		this.vtScan = vtScan;
	}

	/**
	 * Gets the will store the malware hash.
	 *
	 * @return the will store the malware hash
	 */
	public String getMd5Hash() {
		log.trace("Get md5Hash, returns [{}]", md5Hash);
		return md5Hash;
	}

	/**
	 * Sets the will store the malware hash.
	 *
	 * @param hash
	 *            the new will store the malware hash
	 */
	public void setMd5Hash(String hash) {
		log.trace("Set md5Hash to [{}]", hash);
		this.md5Hash = hash;
	}

	/**
	 * Gets the this will be the url through which malware was loaded.
	 *
	 * @return the this will be the url through which malware was loaded
	 */
	public String getUrl() {
		log.trace("Get url, returns [{}]", url);
		return url;
	}

	/**
	 * Sets the this will be the url through which malware was loaded.
	 *
	 * @param url
	 *            the new this will be the url through which malware was loaded
	 */
	public void setUrl(String url) {
		log.trace("Set url to [{}]", url);
		this.url = url;
	}

	/**
	 * Gets the file path for the malware binary.
	 *
	 * @return the file path for the malware binary
	 */
	public String getFilePath() {
		log.trace("Get filePath, returns [{}]", filePath);
		return filePath;
	}

	/**
	 * Sets the file path for the malware binary.
	 *
	 * @param filePath
	 *            the new file path for the malware binary
	 */
	public void setFilePath(String filePath) {
		log.trace("Set filePath to [{}]", filePath);
		this.filePath = filePath;
	}

	/**
	 * Gets the session Id, in case of "kippo" malware download.
	 *
	 * @return the session Id, in case of "kippo" malware download
	 */
	public String getSessionId() {
		log.trace("Get sessionId, returns [{}]", sessionId);
		return sessionId;
	}

	/**
	 * Sets the session Id, in case of "kippo" malware download.
	 *
	 * @param sessionId
	 *            the new session Id, in case of "kippo" malware download
	 */
	public void setSessionId(String sessionId) {
		log.trace("Set sessionId to [{}]", sessionId);
		this.sessionId = sessionId;
	}

	/**
	 * Gets the reference to the virustotal scan {@link VirusTotalScan} and its
	 * results.
	 *
	 * @return the reference to the virustotal scan {@link VirusTotalScan} and
	 *         its results
	 */
	public VirusTotalScan getVtScan() {
		log.trace("Get vtScan, returns [{}]", vtScan);
		return vtScan;
	}

	/**
	 * Sets the reference to the virustotal scan {@link VirusTotalScan} and its
	 * results.
	 *
	 * @param virustotal
	 *            the new reference to the virustotal scan
	 *            {@link VirusTotalScan} and its results
	 */
	public void setVtScan(VirusTotalScan virustotal) {
		log.trace("Set vtScan to [{}]", virustotal);
		this.vtScan = virustotal;
	}

}